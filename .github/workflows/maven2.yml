# Este workflow irá construir um projeto Java com Maven, e cache/restaurar dependências para melhorar o tempo de execução.
# Os testes de unidade serão executados usando o banco de dados em memória H2, o que é mais rápido e isolado.

name: Java CI with Maven

on:
  push:
    branches: [ "main", "staging" ]
  pull_request:
    branches: [ "main" ]

jobs:
  tests:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Set up SDK
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Run Unit Tests
        run: mvn test

  build:
    runs-on: 'ubuntu-latest'
    needs: tests # Garante que a build só ocorra se os testes passarem
    steps:
      - uses: actions/checkout@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Log in to registry
        uses: docker/login-action@v2
        with:
          registry: https://index.docker.io/v1/
          username: ${{ secrets.DOCKERHUB_USERNAME  }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push container image to registry
        uses: docker/build-push-action@v3
        with:
          push: true
          tags: index.docker.io/${{ secrets.DOCKERHUB_USERNAME }}/esg-fiap-java:${{ github.sha }}
          file: ./Dockerfile

  deploy-gcp:
    runs-on: ubuntu-latest
    needs: build # Garante que a imagem Docker foi criada e enviada
    environment:
      name: 'production'

    steps:
      # 1. Autenticação: Faz login no Google Cloud
      - name: 'Authenticate to GCP'
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }} # Usa a chave JSON do segredo

      # 2. Configuração: Instala a CLI do gcloud
      - name: 'Set up gcloud CLI'
        uses: google-github-actions/setup-gcloud@v2
        with:
          version: 'latest'

      # 3. Deploy: Executa a implantação
      - name: 'Deploy to App Engine'
        uses: google-github-actions/deploy-appengine@v2
        with:
          project_id: ${{ secrets.GCP_PROJECT_ID }}
          # Especifica a imagem Docker completa a ser implantada (criada no job build)
          image_url: index.docker.io/${{ secrets.DOCKERHUB_USERNAME }}/esg-fiap-java:${{ github.sha }}
          # Usa o arquivo app.yaml para as configurações do ambiente flexível
          version: v${{ github.sha }}
          promote: true # Envia 100% do tráfego para a nova versão
